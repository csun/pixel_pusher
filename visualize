#! /usr/bin/env python
import sys
import curses
from time import sleep

from lib import board, moves

brd = board.from_file(sys.argv[1])
moves = moves.list_from_file(sys.argv[2])
current_move = 0

stdscr = curses.initscr()

curses.start_color()
curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_RED)
curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_GREEN)

curses.noecho()
curses.cbreak()
curses.curs_set(0)

win = curses.newwin(4 * brd.size, 4 * brd.size, 3, 3)
win.nodelay(1)

def redraw_board():
    win.clear()
    for row in range(brd.size):
        for col in range(brd.size):
            win.addstr(4 * row, 4 * col, str(brd.rows[row][col]))
    win.refresh()

def draw_win_status():
    if brd.is_solved():
        stdscr.addstr(1, 0, "Solved in " + str(len(moves)) + " move(s)!", curses.color_pair(2))
    else:
        stdscr.addstr(1, 0, "Unsolved after " + str(len(moves)) + " move(s)...", curses.color_pair(1))

    stdscr.refresh()

started = False
error = False

stdscr.addstr(0, 0, "s to start / q to quit")
stdscr.refresh()
while 1:
    c = win.getch()
    if c == ord('q'):
        break
    elif c == ord('s'):
        started = True

    if error:
        stdscr.addstr(1, 0, "ERROR: Illegal move attempted at index " + str(current_move), curses.color_pair(1))
        stdscr.refresh()
    elif not started:
        redraw_board()
    elif current_move < len(moves):
        redraw_board()
        try:
            brd.move(moves[current_move])
        except:
            error = True
        current_move += 1
    else:
        redraw_board()
        draw_win_status()

    sleep(0.25)

